// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_routes

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/interactives"
	"github.com/ONSdigital/dp-frontend-interactives-controller/routes"
	"sync"
)

// Ensure, that InteractivesAPIClientMock does implement routes.InteractivesAPIClient.
// If this is not the case, regenerate this file with moq.
var _ routes.InteractivesAPIClient = &InteractivesAPIClientMock{}

// InteractivesAPIClientMock is a mock implementation of routes.InteractivesAPIClient.
//
// 	func TestSomethingThatUsesInteractivesAPIClient(t *testing.T) {
//
// 		// make and configure a mocked routes.InteractivesAPIClient
// 		mockedInteractivesAPIClient := &InteractivesAPIClientMock{
// 			ListInteractivesFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, q *interactives.QueryParams) (interactives.List, error) {
// 				panic("mock out the ListInteractives method")
// 			},
// 		}
//
// 		// use mockedInteractivesAPIClient in code that requires routes.InteractivesAPIClient
// 		// and then make assertions.
//
// 	}
type InteractivesAPIClientMock struct {
	// ListInteractivesFunc mocks the ListInteractives method.
	ListInteractivesFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, q *interactives.QueryParams) (interactives.List, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListInteractives holds details about calls to the ListInteractives method.
		ListInteractives []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// Q is the q argument value.
			Q *interactives.QueryParams
		}
	}
	lockListInteractives sync.RWMutex
}

// ListInteractives calls ListInteractivesFunc.
func (mock *InteractivesAPIClientMock) ListInteractives(ctx context.Context, userAuthToken string, serviceAuthToken string, q *interactives.QueryParams) (interactives.List, error) {
	if mock.ListInteractivesFunc == nil {
		panic("InteractivesAPIClientMock.ListInteractivesFunc: method is nil but InteractivesAPIClient.ListInteractives was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		Q                *interactives.QueryParams
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		Q:                q,
	}
	mock.lockListInteractives.Lock()
	mock.calls.ListInteractives = append(mock.calls.ListInteractives, callInfo)
	mock.lockListInteractives.Unlock()
	return mock.ListInteractivesFunc(ctx, userAuthToken, serviceAuthToken, q)
}

// ListInteractivesCalls gets all the calls that were made to ListInteractives.
// Check the length with:
//     len(mockedInteractivesAPIClient.ListInteractivesCalls())
func (mock *InteractivesAPIClientMock) ListInteractivesCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	Q                *interactives.QueryParams
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		Q                *interactives.QueryParams
	}
	mock.lockListInteractives.RLock()
	calls = mock.calls.ListInteractives
	mock.lockListInteractives.RUnlock()
	return calls
}
