// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_storage

import (
	"context"
	"github.com/ONSdigital/dp-frontend-interactives-controller/storage"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"io"
	"sync"
)

// Ensure, that ProviderMock does implement storage.Provider.
// If this is not the case, regenerate this file with moq.
var _ storage.Provider = &ProviderMock{}

// ProviderMock is a mock implementation of storage.Provider.
//
// 	func TestSomethingThatUsesProvider(t *testing.T) {
//
// 		// make and configure a mocked storage.Provider
// 		mockedProvider := &ProviderMock{
// 			CheckerFunc: func() func(context.Context, *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetFunc: func(path string) (io.ReadCloser, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedProvider in code that requires storage.Provider
// 		// and then make assertions.
//
// 	}
type ProviderMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func() func(context.Context, *healthcheck.CheckState) error

	// GetFunc mocks the Get method.
	GetFunc func(path string) (io.ReadCloser, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Path is the path argument value.
			Path string
		}
	}
	lockChecker sync.RWMutex
	lockGet     sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ProviderMock) Checker() func(context.Context, *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ProviderMock.CheckerFunc: method is nil but Provider.Checker was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc()
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedProvider.CheckerCalls())
func (mock *ProviderMock) CheckerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ProviderMock) Get(path string) (io.ReadCloser, error) {
	if mock.GetFunc == nil {
		panic("ProviderMock.GetFunc: method is nil but Provider.Get was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(path)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedProvider.GetCalls())
func (mock *ProviderMock) GetCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
