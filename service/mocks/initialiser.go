// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks_service

import (
	"github.com/ONSdigital/dp-api-clients-go/v2/health"
	"github.com/ONSdigital/dp-frontend-interactives-controller/config"
	"github.com/ONSdigital/dp-frontend-interactives-controller/routes"
	"github.com/ONSdigital/dp-frontend-interactives-controller/service"
	"github.com/ONSdigital/dp-frontend-interactives-controller/storage"
	"net/http"
	"sync"
)

// Ensure, that InitialiserMock does implement service.Initialiser.
// If this is not the case, regenerate this file with moq.
var _ service.Initialiser = &InitialiserMock{}

// InitialiserMock is a mock implementation of service.Initialiser.
//
// 	func TestSomethingThatUsesInitialiser(t *testing.T) {
//
// 		// make and configure a mocked service.Initialiser
// 		mockedInitialiser := &InitialiserMock{
// 			DoGetHTTPServerFunc: func(bindAddr string, router http.Handler) service.HTTPServer {
// 				panic("mock out the DoGetHTTPServer method")
// 			},
// 			DoGetHealthCheckFunc: func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
// 				panic("mock out the DoGetHealthCheck method")
// 			},
// 			DoGetHealthClientFunc: func(name string, url string) *health.Client {
// 				panic("mock out the DoGetHealthClient method")
// 			},
// 			DoGetInteractivesAPIClientFunc: func(apiRouter *health.Client) (routes.InteractivesAPIClient, error) {
// 				panic("mock out the DoGetInteractivesAPIClient method")
// 			},
// 			DoGetStorageProviderFunc: func(cfg *config.Config) (storage.Provider, error) {
// 				panic("mock out the DoGetStorageProvider method")
// 			},
// 		}
//
// 		// use mockedInitialiser in code that requires service.Initialiser
// 		// and then make assertions.
//
// 	}
type InitialiserMock struct {
	// DoGetHTTPServerFunc mocks the DoGetHTTPServer method.
	DoGetHTTPServerFunc func(bindAddr string, router http.Handler) service.HTTPServer

	// DoGetHealthCheckFunc mocks the DoGetHealthCheck method.
	DoGetHealthCheckFunc func(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error)

	// DoGetHealthClientFunc mocks the DoGetHealthClient method.
	DoGetHealthClientFunc func(name string, url string) *health.Client

	// DoGetInteractivesAPIClientFunc mocks the DoGetInteractivesAPIClient method.
	DoGetInteractivesAPIClientFunc func(apiRouter *health.Client) (routes.InteractivesAPIClient, error)

	// DoGetStorageProviderFunc mocks the DoGetStorageProvider method.
	DoGetStorageProviderFunc func(cfg *config.Config) (storage.Provider, error)

	// calls tracks calls to the methods.
	calls struct {
		// DoGetHTTPServer holds details about calls to the DoGetHTTPServer method.
		DoGetHTTPServer []struct {
			// BindAddr is the bindAddr argument value.
			BindAddr string
			// Router is the router argument value.
			Router http.Handler
		}
		// DoGetHealthCheck holds details about calls to the DoGetHealthCheck method.
		DoGetHealthCheck []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
			// BuildTime is the buildTime argument value.
			BuildTime string
			// GitCommit is the gitCommit argument value.
			GitCommit string
			// Version is the version argument value.
			Version string
		}
		// DoGetHealthClient holds details about calls to the DoGetHealthClient method.
		DoGetHealthClient []struct {
			// Name is the name argument value.
			Name string
			// URL is the url argument value.
			URL string
		}
		// DoGetInteractivesAPIClient holds details about calls to the DoGetInteractivesAPIClient method.
		DoGetInteractivesAPIClient []struct {
			// ApiRouter is the apiRouter argument value.
			ApiRouter *health.Client
		}
		// DoGetStorageProvider holds details about calls to the DoGetStorageProvider method.
		DoGetStorageProvider []struct {
			// Cfg is the cfg argument value.
			Cfg *config.Config
		}
	}
	lockDoGetHTTPServer            sync.RWMutex
	lockDoGetHealthCheck           sync.RWMutex
	lockDoGetHealthClient          sync.RWMutex
	lockDoGetInteractivesAPIClient sync.RWMutex
	lockDoGetStorageProvider       sync.RWMutex
}

// DoGetHTTPServer calls DoGetHTTPServerFunc.
func (mock *InitialiserMock) DoGetHTTPServer(bindAddr string, router http.Handler) service.HTTPServer {
	if mock.DoGetHTTPServerFunc == nil {
		panic("InitialiserMock.DoGetHTTPServerFunc: method is nil but Initialiser.DoGetHTTPServer was just called")
	}
	callInfo := struct {
		BindAddr string
		Router   http.Handler
	}{
		BindAddr: bindAddr,
		Router:   router,
	}
	mock.lockDoGetHTTPServer.Lock()
	mock.calls.DoGetHTTPServer = append(mock.calls.DoGetHTTPServer, callInfo)
	mock.lockDoGetHTTPServer.Unlock()
	return mock.DoGetHTTPServerFunc(bindAddr, router)
}

// DoGetHTTPServerCalls gets all the calls that were made to DoGetHTTPServer.
// Check the length with:
//     len(mockedInitialiser.DoGetHTTPServerCalls())
func (mock *InitialiserMock) DoGetHTTPServerCalls() []struct {
	BindAddr string
	Router   http.Handler
} {
	var calls []struct {
		BindAddr string
		Router   http.Handler
	}
	mock.lockDoGetHTTPServer.RLock()
	calls = mock.calls.DoGetHTTPServer
	mock.lockDoGetHTTPServer.RUnlock()
	return calls
}

// DoGetHealthCheck calls DoGetHealthCheckFunc.
func (mock *InitialiserMock) DoGetHealthCheck(cfg *config.Config, buildTime string, gitCommit string, version string) (service.HealthChecker, error) {
	if mock.DoGetHealthCheckFunc == nil {
		panic("InitialiserMock.DoGetHealthCheckFunc: method is nil but Initialiser.DoGetHealthCheck was just called")
	}
	callInfo := struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}{
		Cfg:       cfg,
		BuildTime: buildTime,
		GitCommit: gitCommit,
		Version:   version,
	}
	mock.lockDoGetHealthCheck.Lock()
	mock.calls.DoGetHealthCheck = append(mock.calls.DoGetHealthCheck, callInfo)
	mock.lockDoGetHealthCheck.Unlock()
	return mock.DoGetHealthCheckFunc(cfg, buildTime, gitCommit, version)
}

// DoGetHealthCheckCalls gets all the calls that were made to DoGetHealthCheck.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthCheckCalls())
func (mock *InitialiserMock) DoGetHealthCheckCalls() []struct {
	Cfg       *config.Config
	BuildTime string
	GitCommit string
	Version   string
} {
	var calls []struct {
		Cfg       *config.Config
		BuildTime string
		GitCommit string
		Version   string
	}
	mock.lockDoGetHealthCheck.RLock()
	calls = mock.calls.DoGetHealthCheck
	mock.lockDoGetHealthCheck.RUnlock()
	return calls
}

// DoGetHealthClient calls DoGetHealthClientFunc.
func (mock *InitialiserMock) DoGetHealthClient(name string, url string) *health.Client {
	if mock.DoGetHealthClientFunc == nil {
		panic("InitialiserMock.DoGetHealthClientFunc: method is nil but Initialiser.DoGetHealthClient was just called")
	}
	callInfo := struct {
		Name string
		URL  string
	}{
		Name: name,
		URL:  url,
	}
	mock.lockDoGetHealthClient.Lock()
	mock.calls.DoGetHealthClient = append(mock.calls.DoGetHealthClient, callInfo)
	mock.lockDoGetHealthClient.Unlock()
	return mock.DoGetHealthClientFunc(name, url)
}

// DoGetHealthClientCalls gets all the calls that were made to DoGetHealthClient.
// Check the length with:
//     len(mockedInitialiser.DoGetHealthClientCalls())
func (mock *InitialiserMock) DoGetHealthClientCalls() []struct {
	Name string
	URL  string
} {
	var calls []struct {
		Name string
		URL  string
	}
	mock.lockDoGetHealthClient.RLock()
	calls = mock.calls.DoGetHealthClient
	mock.lockDoGetHealthClient.RUnlock()
	return calls
}

// DoGetInteractivesAPIClient calls DoGetInteractivesAPIClientFunc.
func (mock *InitialiserMock) DoGetInteractivesAPIClient(apiRouter *health.Client) (routes.InteractivesAPIClient, error) {
	if mock.DoGetInteractivesAPIClientFunc == nil {
		panic("InitialiserMock.DoGetInteractivesAPIClientFunc: method is nil but Initialiser.DoGetInteractivesAPIClient was just called")
	}
	callInfo := struct {
		ApiRouter *health.Client
	}{
		ApiRouter: apiRouter,
	}
	mock.lockDoGetInteractivesAPIClient.Lock()
	mock.calls.DoGetInteractivesAPIClient = append(mock.calls.DoGetInteractivesAPIClient, callInfo)
	mock.lockDoGetInteractivesAPIClient.Unlock()
	return mock.DoGetInteractivesAPIClientFunc(apiRouter)
}

// DoGetInteractivesAPIClientCalls gets all the calls that were made to DoGetInteractivesAPIClient.
// Check the length with:
//     len(mockedInitialiser.DoGetInteractivesAPIClientCalls())
func (mock *InitialiserMock) DoGetInteractivesAPIClientCalls() []struct {
	ApiRouter *health.Client
} {
	var calls []struct {
		ApiRouter *health.Client
	}
	mock.lockDoGetInteractivesAPIClient.RLock()
	calls = mock.calls.DoGetInteractivesAPIClient
	mock.lockDoGetInteractivesAPIClient.RUnlock()
	return calls
}

// DoGetStorageProvider calls DoGetStorageProviderFunc.
func (mock *InitialiserMock) DoGetStorageProvider(cfg *config.Config) (storage.Provider, error) {
	if mock.DoGetStorageProviderFunc == nil {
		panic("InitialiserMock.DoGetStorageProviderFunc: method is nil but Initialiser.DoGetStorageProvider was just called")
	}
	callInfo := struct {
		Cfg *config.Config
	}{
		Cfg: cfg,
	}
	mock.lockDoGetStorageProvider.Lock()
	mock.calls.DoGetStorageProvider = append(mock.calls.DoGetStorageProvider, callInfo)
	mock.lockDoGetStorageProvider.Unlock()
	return mock.DoGetStorageProviderFunc(cfg)
}

// DoGetStorageProviderCalls gets all the calls that were made to DoGetStorageProvider.
// Check the length with:
//     len(mockedInitialiser.DoGetStorageProviderCalls())
func (mock *InitialiserMock) DoGetStorageProviderCalls() []struct {
	Cfg *config.Config
} {
	var calls []struct {
		Cfg *config.Config
	}
	mock.lockDoGetStorageProvider.RLock()
	calls = mock.calls.DoGetStorageProvider
	mock.lockDoGetStorageProvider.RUnlock()
	return calls
}
